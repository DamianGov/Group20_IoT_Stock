@model Group20_IoT.Models.Stock

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>



@using (Html.BeginForm("Create", "Stocks", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Stock</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.StockCode, htmlAttributes: new { @class = "control-label col-md-2 required-star" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.StockCode, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.StockCode, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2 required-star" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2 required-star" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", id = "descriptionTextArea" } })
            <div id="charCount"></div>
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "control-label col-md-2 required-star" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.TotalQuantity, htmlAttributes: new { @class = "control-label col-md-2 required-star" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.TotalQuantity, new { htmlAttributes = new { @class = "form-control", min = 1, max = int.MaxValue } })
            @Html.ValidationMessageFor(model => model.TotalQuantity, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ImageFile, htmlAttributes: new { @class = "control-label col-md-2 required-star" })
        <div class="col-md-10">
            <input type="file" name="image" id="image" accept=".jpg, .jpeg, .png, .gif" />
            @Html.ValidationMessageFor(model => model.ImageFile, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Loanable, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.CheckBoxFor(model => model.Loanable, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Loanable, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.StorageArea.RoomId, "Room", htmlAttributes: new { @class = "control-label col-md-2 required-star" })
        <div class="col-md-10">
            @Html.DropDownList("Rooms", null, new { id = "ddlRoom" })
            @Html.ValidationMessageFor(model => model.StorageArea.RoomId)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.StorageArea, "Storage Area", htmlAttributes: new { @class = "control-label col-md-2 required-star" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.StorageAreaId, Enumerable.Empty<SelectListItem>(), "Select a Storage Area", new { id = "ddlStorageArea" })
            @Html.ValidationMessageFor(model => model.StorageArea)
        </div>
    </div>
    

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {
            $("#ddlRoom").change(function () {
                var roomId = $(this).val();
                if (tryParseInt(roomId)) {
                    loadStorageAreas(roomId);
                } else {
                    $("#ddlStorageArea").html("");
                    $("#ddlStorageArea").append(
                        $("<option></option>").val(-1).html("No Storage Areas")
                    );
                }
            });

            // Get the textarea element and character count element
            var textarea = $("textarea[name='Description']");
            var charCount = $("#charCount");

            // Attach an input event listener to the textarea
            // Function to update character count
            function updateCharCount() {
                // Get the current character count
                var currentCount = textarea.val().length;

                // Display the character count
                charCount.text("Character Count: " + currentCount);

                // You can also check if the user exceeds the 250-character limit and provide feedback
                if (currentCount > 250 || currentCount == 0) {
                    charCount.css("color", "red");
                } else {
                    charCount.css("color", "green"); // Reset color
                }
            }

            // Call the updateCharCount function initially
            updateCharCount();

            // Attach an input event listener to the textarea
            textarea.on("input", function () {
                // Call the updateCharCount function when the user types
                updateCharCount();
            });


        function loadStorageAreas(roomId) {
            $.ajax({
                        url: '@Url.Action("GetStorageAreasByRoom", "Stocks")',
                        type: "GET",
                        data: { roomId: roomId },
                        success: function (data) {
                            $("#ddlStorageArea").html("");
                            if (data.length > 0) {
                                $.each(data, function (index, item) {
                                    $("#ddlStorageArea").append(
                                        $("<option></option>").val(item.Value).html(item.Text)
                                    );
                                });
                            } else {
                                $("#ddlStorageArea").append(
                                    $("<option></option>").val(-1).html("No Storage Areas in this Room")
                                );
                            }
                        },
                        error: function () {
                            console.log("Error occurred while loading Stock Areas.");
                }
            });

            }
            $("#ddlRoom").trigger("change");
        });
    </script>
    <script type="text/javascript">
        $("#UnitPrice").on("keypress keyup blur", function (event) {
            // Replace a comma with a period
            if (event.key === ',') {
                $(this).val($(this).val() + '.');
                event.preventDefault(); // Prevent the comma from being added
            }

            // Allow only digits and a single period
            $(this).val($(this).val().replace(/[^0-9\.]/g, ''));

            // Remove extra periods
            if ($(this).val().match(/\./g) && $(this).val().match(/\./g).length > 1) {
                $(this).val($(this).val().replace(/\.$/m, ''));
            }
        });

        $("#TotalQuantity").on("keypress keyup blur", function (event) {
            // Allow only digits and backspace key (code 8)
            if (event.keyCode !== 8 && (event.keyCode < 48 || event.keyCode > 57)) {
                event.preventDefault();
            }
        });
    </script>

}
