@model Group20_IoT.Models.Walkthrough
@{
    ViewBag.Title = "Create Walkthrough";
}
<style>
    .card {
        width: 100% !important;
        margin-bottom: 1.7rem !important;
        background-color: #2E3842 !important;
        color: #fff !important;
    }

    .card-header {
        background-color: #003366 !important;
        color: #fff !important;
        text-align: center !important;
        padding: 0.75rem !important;
        font-weight: bold !important;
    }

    .card-body {
        padding: 1.25rem !important;
    }

    .btn-primary {
        display: inline-block;
        padding: 10px 20px;
        color: #03e9f4;
        font-size: 13px;
        text-decoration: none;
        text-transform: uppercase;
        border: none;
        outline: none;
        background: transparent;
        transition: background 0.5s, color 0.5s;
        margin-top: 20px;
        letter-spacing: 4px;
        cursor: pointer;
    }

        .btn-primary:hover {
            background: #03e9f4;
            color: #fff;
            border-radius: 5px;
            box-shadow: 0 0 5px #03e9f4, 0 0 25px #03e9f4, 0 0 50px #03e9f4, 0 0 100px #03e9f4;
        }
</style>
<div class="card" style="width: 18rem;">
    <div class="card-body">
        <h2 class="card-title">Create a Walkthrough</h2>

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <hr />
                <div class="form-group">
                    @Html.LabelFor(model => model.WalkthroughDate, htmlAttributes: new { @class = "control-label col-md-2 required-star" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.WalkthroughDate, new { htmlAttributes = new { @class = "datepicker form-control" } })
                        @Html.ValidationMessageFor(model => model.WalkthroughDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.WalkthroughDescription, htmlAttributes: new { @class = "control-label col-md-2 required-star" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.WalkthroughDescription, new { htmlAttributes = new { @class = "textarea", id = "descriptionTextArea" } })
                        <div id="charCount"></div>
                        @Html.ValidationMessageFor(model => model.WalkthroughDescription, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Go To Select Stock >" class="btn btn-primary" />
                    </div>
                </div>
            </div>
        }

    </div>
</div>
@section Scripts
{
    <script>
        $(".datepicker").datepicker({
            dateFormat: 'yy/mm/dd',
            minDate: "0",
            maxDate: "+1w",
        }).datepicker("setDate", "0");
        $(".datepicker").attr("readonly", true);
    </script>
    <script>
        $(document).ready(function () {

            // Get the textarea element and character count element
            var textarea = $("textarea[name='Description']");
            var charCount = $("#charCount");

            // Attach an input event listener to the textarea
            // Function to update character count
            function updateCharCount() {
                // Get the current character count
                var currentCount = textarea.val().length;

                // Display the character count
                charCount.text("Character Count: " + currentCount);

                // You can also check if the user exceeds the 250-character limit and provide feedback
                if (currentCount > 250 || currentCount == 0) {
                    charCount.css("color", "red");
                } else {
                    charCount.css("color", "green"); // Reset color
                }
            }

            // Call the updateCharCount function initially
            updateCharCount();

            // Attach an input event listener to the textarea
            textarea.on("input", function () {
                // Call the updateCharCount function when the user types
                updateCharCount();
            });
        }
    </script>
}
